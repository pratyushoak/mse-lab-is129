Dalvik Virtual Machine Instruction-set

General Design:

The machine model and calling conventions are meant to approximately imitate common real architectures and C-style calling conventions:-
The VM is register-based, and frames are fixed in size upon creation. Each frame consists of a particular number of registers (specified by the method) as well as any adjunct data needed to execute the method, such as (but not limited to) the program counter and a reference to the .dex file that contains the method.
Registers are 32 bits wide. Adjacent register pairs are used for 64-bit values.
In terms of bitwise representation, (Object) null == (int) 0.
The N arguments to a method land in the last N registers of the method's invocation frame, in order. Wide arguments consume two registers. Instance methods are passed a this reference as their first argument.
The storage unit in the instruction stream is a 16-bit unsigned quantity. Some bits in some instructions are ignored / must-be-zero.

Human-syntax and mnemonics:

Dest-then-source ordering for arguments.
Some opcodes have a disambiguating suffix with respect to the type(s) they operate on: Type-general 64-bit opcodes are suffixed with -wide. Type-specific opcodes are suffixed with their type (or a straightforward abbreviation), one of: -boolean -byte -char -short -int -long -float -double -object -string -class -void. Type-general 32-bit opcodes are unmarked.
Some opcodes have a disambiguating suffix to distinguish otherwise-identical operations that have different instruction layouts or options. These suffixes are separated from the main names with a slash ("/") and mainly exist at all to make there be a one-to-one mapping with static constants in the code that generates and interprets executables (that is, to reduce ambiguity for humans).

Instruction-subset:

1) Mnemonic/Syntax: move vA, vB
   Arguments:  A: destination register (4 bits)
               B: source register (4 bits)
   Description: Move the contents of one non-object register to another.

2) Mnemonic/Syntax: move/from16 vAA, vBBBB	
   Arguments:    A: destination register (8 bits)
		 B: source register (16 bits)	
   Description: Move the contents of one non-object register to another.

3) Mnemonic/Syntax: move/16 vAAAA, vBBBB		
   Arguments:    A: destination register (16 bits)
		 B: source register (16 bits)	
   Description: Move the contents of one non-object register to another.

4) Mnemonic/Syntax: move-result-wide vAA	
   Arguments:    A: destination register pair (8 bits)	
   Description: Move the double-word result of the most recent invoke-kind into the indicated register pair. 
		This must be done as the instruction immediately after an invoke-kind whose (double-word) result is not to be ignored; anywhere else is invalid.

5) Mnemonic/Syntax: check-cast vAA, type@BBBB		
   Arguments:    A: reference-bearing register (8 bits)
		 B: type index (16 bits)	
   Description: Throw a ClassCastException if the reference in the given register cannot be cast to the indicated type.
                 Note: Since A must always be a reference (and not a primitive value), this will necessarily fail at runtime (that is, it will throw an exception) if B refers to a primitive type.

6) Mnemonic/Syntax: instance-of vA, vB, type@CCCC	
   Arguments:   A: destination register (4 bits)
		B: reference-bearing register (4 bits)
		C: type index (16 bits)	
   Description: Store in the given destination register 1 if the indicated reference is an instance of the given type, or 0 if not.
		Note: Since B must always be a reference (and not a primitive value), this will always result in 0 being stored if C refers to a primitive type.

7) Mnemonic/Syntax: new-array vA, vB, type@CCCC	
   Arguments:    A: destination register (8 bits)
		 B: size register
		 C: type index	
   Description: Construct a new array of the indicated type and size. The type must be an array type.

8) Mnemonic/Syntax: filled-new-array {vD, vE, vF, vG, vA}, type@CCCC	
   Arguments:   B: array size and argument word count (4 bits)
		C: type index (16 bits)
		D..G, A: argument registers (4 bits each)
   Description: Construct an array of the given type and size, filling it with the supplied contents. The type must be an array type. The array's contents must be single-word (that is, no arrays of long or double, but reference types are acceptable). The constructed instance is stored as a "result" in the same way that the method invocation instructions store their results, so the constructed instance must be moved to a register with an immediately subsequent move-result-object instruction (if it is to be used).

9) Mnemonic/Syntax: throw vAA		
   Arguments:    A: exception-bearing register (8 bits)	
   Description: Throw the indicated exception.


10) Mnemonic/Syntax: packed-switch vAA, +BBBBBBBB 
			(with supplemental data as specified below in "packed-switch Format")	
   Arguments:   A: register to test
		B: signed "branch" offset to table data pseudo-instruction (32 bits)	
   Description:Jump to a new instruction based on the value in the given register, using a table of offsets corresponding to each value in a particular integral range, or fall through to the next instruction if there is no match.





